const express = require("express")
const cors = require("cors")
const { exec, spawn } = require("child_process")
const fs = require("fs")
const path = require("path")
const rateLimit = require("express-rate-limit")
const helmet = require("helmet")
const validator = require("validator")
const crypto = require("crypto")

const app = express()

// üõ°Ô∏è CONFIGURA√á√ïES MAIS GENEROSAS
const PORT = process.env.PORT || 8080
const MAX_CONCURRENT_DOWNLOADS = 8
const MAX_FILE_SIZE = 1024 * 1024 * 1024 // 1GB
const MAX_DURATION = 7200 // üïê 2 HORAS PARA TUDO (MP3/MP4, qualquer qualidade)

// üß† SISTEMA DE LIMPEZA AGRESSIVA DE MEM√ìRIA - RAILWAY FIX
let lastActivity = Date.now()

// üß† FUN√á√ÉO PARA GARBAGE COLLECTION FOR√áADO - RAILWAY COMPATIBLE
function forceGarbageCollection() {
  try {
    // M√©todo 1: Tentar global.gc() se dispon√≠vel
    if (typeof global.gc === "function") {
      const before = process.memoryUsage().heapUsed
      global.gc()
      const after = process.memoryUsage().heapUsed
      const freed = Math.round((before - after) / 1024 / 1024)
      console.log(`üóëÔ∏è GC (Method 1): Liberados ${freed}MB de RAM`)
      return freed
    }

    // M√©todo 2: For√ßar atrav√©s de require('v8')
    try {
      const v8 = require("v8")
      if (v8.getHeapStatistics) {
        const before = process.memoryUsage().heapUsed

        // For√ßar coleta usando t√©cnicas alternativas
        if (global.gc) {
          global.gc()
        } else {
          // Criar press√£o de mem√≥ria para for√ßar GC
          const dummy = new Array(1000000).fill("x")
          dummy.length = 0
        }

        const after = process.memoryUsage().heapUsed
        const freed = Math.round((before - after) / 1024 / 1024)
        console.log(`üóëÔ∏è GC (Method 2): Liberados ${freed}MB de RAM`)
        return freed
      }
    } catch (v8Error) {
      console.log("‚ö†Ô∏è V8 method failed:", v8Error.message)
    }

    // M√©todo 3: Limpeza manual agressiva
    console.log("üßπ GC n√£o dispon√≠vel - usando limpeza manual agressiva")

    // Limpar vari√°veis globais
    if (global.Buffer) {
      global.Buffer.poolSize = 1
    }

    // For√ßar limpeza de arrays grandes
    const before = process.memoryUsage().heapUsed

    // Criar e destruir objetos para for√ßar coleta
    for (let i = 0; i < 100; i++) {
      const temp = new Array(10000).fill(null)
      temp.length = 0
    }

    const after = process.memoryUsage().heapUsed
    const freed = Math.round((before - after) / 1024 / 1024)
    console.log(`üßπ Manual cleanup: ${freed}MB liberados`)
    return freed
  } catch (error) {
    console.log("‚ùå Erro na limpeza de mem√≥ria:", error.message)
    return 0
  }
}

// üß† MONITORAMENTO DE MEM√ìRIA APRIMORADO
function logMemoryUsage() {
  const used = process.memoryUsage()
  const mb = (bytes) => Math.round(bytes / 1024 / 1024)

  console.log(`üìä RAM: ${mb(used.heapUsed)}MB heap / ${mb(used.rss)}MB total`)
  console.log(`üìä External: ${mb(used.external)}MB / ArrayBuffers: ${mb(used.arrayBuffers)}MB`)

  // Alerta se usar mais que 200MB
  if (used.heapUsed > 200 * 1024 * 1024) {
    console.log("üö® Alto uso de RAM - for√ßando limpeza...")
    forceGarbageCollection()
  }

  return {
    heapUsed: mb(used.heapUsed),
    rss: mb(used.rss),
    external: mb(used.external),
    arrayBuffers: mb(used.arrayBuffers),
  }
}

// üß† VERIFICAR VARI√ÅVEIS DE OTIMIZA√á√ÉO NA INICIALIZA√á√ÉO - RAILWAY DEBUG
function checkOptimizationVariables() {
  console.log("üß† === VERIFICA√á√ÉO DE OTIMIZA√á√ÉO DE MEM√ìRIA (RAILWAY) ===")
  console.log(`NODE_ENV: ${process.env.NODE_ENV || "‚ùå N√ÉO DEFINIDO"}`)
  console.log(`NODE_OPTIONS: ${process.env.NODE_OPTIONS || "‚ùå N√ÉO DEFINIDO"}`)
  console.log(`MAX_OLD_SPACE_SIZE: ${process.env.MAX_OLD_SPACE_SIZE || "‚ùå N√ÉO DEFINIDO"}MB`)

  // Verifica√ß√µes m√∫ltiplas para GC
  const gcMethods = []

  if (typeof global.gc === "function") {
    gcMethods.push("‚úÖ global.gc() dispon√≠vel")
  } else {
    gcMethods.push("‚ùå global.gc() n√£o dispon√≠vel")
  }

  try {
    const v8 = require("v8")
    if (v8.getHeapStatistics) {
      gcMethods.push("‚úÖ V8 heap statistics dispon√≠vel")
    }
  } catch (e) {
    gcMethods.push("‚ùå V8 n√£o dispon√≠vel")
  }

  console.log("üîç M√©todos de GC dispon√≠veis:")
  gcMethods.forEach((method) => console.log(`   ${method}`))

  if (typeof global.gc === "undefined") {
    console.log("üö® RAILWAY ISSUE: NODE_OPTIONS pode n√£o estar sendo aplicado corretamente")
    console.log("üí° WORKAROUND: Usando m√©todos alternativos de limpeza de mem√≥ria")
    console.log("üîß TESTE: Executando limpeza manual...")

    // Testar limpeza manual imediatamente
    const freed = forceGarbageCollection()
    console.log(`üß™ Teste de limpeza: ${freed}MB processados`)
  } else {
    console.log("‚úÖ GC est√° funcionando - otimiza√ß√£o ativa!")
    // Testar GC imediatamente
    forceGarbageCollection()
  }

  console.log("üß† ============================================")
}

// üß† LIMPEZA AGRESSIVA DE MEM√ìRIA PARA RAILWAY
function aggressiveMemoryCleanup() {
  console.log("üßπ === LIMPEZA AGRESSIVA DE MEM√ìRIA ===")

  const before = process.memoryUsage()

  try {
    // 1. Tentar GC normal
    const gcFreed = forceGarbageCollection()

    // 2. Limpar caches do Node.js
    if (require.cache) {
      const cacheKeys = Object.keys(require.cache)
      console.log(`üóÇÔ∏è Limpando ${cacheKeys.length} m√≥dulos do cache`)

      // Manter apenas m√≥dulos essenciais
      const essentialModules = ["express", "cors", "helmet", "validator"]
      cacheKeys.forEach((key) => {
        const isEssential = essentialModules.some((mod) => key.includes(mod))
        if (!isEssential && !key.includes("node_modules")) {
          try {
            delete require.cache[key]
          } catch (e) {
            // Ignorar erros de limpeza
          }
        }
      })
    }

    // 3. Limpar vari√°veis globais desnecess√°rias
    if (global.Buffer && global.Buffer.poolSize > 1) {
      global.Buffer.poolSize = 1
      console.log("üîß Buffer pool size reduzido")
    }

    // 4. For√ßar coleta atrav√©s de press√£o de mem√≥ria
    const tempArrays = []
    for (let i = 0; i < 50; i++) {
      tempArrays.push(new Array(1000).fill(null))
    }
    tempArrays.length = 0

    const after = process.memoryUsage()
    const totalFreed = Math.round((before.heapUsed - after.heapUsed) / 1024 / 1024)

    console.log(`üéØ Limpeza completa: ${totalFreed}MB liberados`)
    console.log(
      `üìä Antes: ${Math.round(before.heapUsed / 1024 / 1024)}MB ‚Üí Depois: ${Math.round(after.heapUsed / 1024 / 1024)}MB`,
    )

    return totalFreed
  } catch (error) {
    console.log("‚ùå Erro na limpeza agressiva:", error.message)
    return 0
  }
}

const ALLOWED_DOMAINS = [
  // TikTok
  "tiktok.com",
  "vm.tiktok.com",
  "vt.tiktok.com",
  "m.tiktok.com",
  "www.tiktok.com",

  // Twitter/X
  "twitter.com",
  "x.com",
  "t.co",
  "mobile.twitter.com",
  "www.twitter.com",
  "www.x.com",

  // Instagram
  "instagram.com",
  "www.instagram.com",
  "m.instagram.com",

  // YouTube
  "youtube.com",
  "youtu.be",
  "www.youtube.com",
  "m.youtube.com",
  "music.youtube.com",

  // Reddit
  "reddit.com",
  "www.reddit.com",
  "old.reddit.com",
  "m.reddit.com",
  "new.reddit.com",

  // Facebook
  "facebook.com",
  "fb.watch",
  "www.facebook.com",
  "m.facebook.com",
  "web.facebook.com",

  // Outras plataformas
  "twitch.tv",
  "clips.twitch.tv",
  "www.twitch.tv",
  "soundcloud.com",
  "www.soundcloud.com",
  "m.soundcloud.com",
  "vimeo.com",
  "www.vimeo.com",
  "player.vimeo.com",
  "dailymotion.com",
  "www.dailymotion.com",
  "streamable.com",
  "www.streamable.com",
]

const DOWNLOADS = path.join(__dirname, "downloads")
const COOKIES_DIR = path.join(__dirname, "cookies")

// üõ°Ô∏è CONTADOR DE DOWNLOADS ATIVOS - CORRIGIDO
let activeDownloads = 0

// üê¶ COOKIES ESSENCIAIS PARA TWITTER NSFW
const TWITTER_ESSENTIAL_COOKIES = [
  "auth_token", // ‚≠ê‚≠ê‚≠ê CR√çTICO - Token de autentica√ß√£o principal
  "ct0", // ‚≠ê‚≠ê‚≠ê CR√çTICO - CSRF token
  "twid", // ‚≠ê‚≠ê IMPORTANTE - Twitter ID
  "att", // ‚≠ê‚≠ê IMPORTANTE - Authentication token
  "personalization_id", // ‚≠ê √öTIL - Configura√ß√µes de conta
]

// üéØ CORRE√á√ÉO YOUTUBE: User-Agents mais recentes e variados
const userAgents = [
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
  "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0",
]

// üéØ CORRE√á√ÉO YOUTUBE: Fun√ß√£o para atualizar yt-dlp automaticamente
async function ensureYtDlpUpdated() {
  try {
    console.log("üîÑ Verificando/atualizando yt-dlp...")

    // Tentar atualizar yt-dlp
    await executeSecureCommand("pip", ["install", "--upgrade", "yt-dlp"], { timeout: 60000 })
    console.log("‚úÖ yt-dlp atualizado com sucesso")

    // Verificar vers√£o
    const { stdout } = await executeSecureCommand("yt-dlp", ["--version"], { timeout: 10000 })
    console.log(`üì¶ Vers√£o do yt-dlp: ${stdout.trim()}`)

    return true
  } catch (error) {
    console.log("‚ö†Ô∏è N√£o foi poss√≠vel atualizar yt-dlp:", error.message)
    return false
  }
}

// üéØ CORRE√á√ÉO YOUTUBE: Estrat√©gias m√∫ltiplas para bypass
class YouTubeBypassStrategies {
  static getStrategy1Args(userAgent, cookieFile) {
    const args = [
      "--user-agent",
      userAgent,
      "--referer",
      "https://www.youtube.com/",
      "--add-header",
      "Accept-Language:en-US,en;q=0.9",
      "--add-header",
      "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
      "--sleep-interval",
      "1",
      "--max-sleep-interval",
      "3",
      "--extractor-retries",
      "5",
      "--fragment-retries",
      "5",
      "--retry-sleep",
      "2",
      "--no-warnings",
      "--no-playlist",
      "--geo-bypass",
      "--ignore-errors",
    ]

    if (cookieFile) {
      args.push("--cookies", cookieFile)
    }

    return args
  }

  static getStrategy2Args(userAgent) {
    return [
      "--user-agent",
      userAgent,
      "--referer",
      "https://www.youtube.com/",
      "--add-header",
      "Accept-Language:en-US,en;q=0.9",
      "--add-header",
      "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
      "--sleep-interval",
      "2",
      "--max-sleep-interval",
      "5",
      "--extractor-retries",
      "3",
      "--fragment-retries",
      "3",
      "--retry-sleep",
      "3",
      "--no-warnings",
      "--no-playlist",
      "--geo-bypass",
      "--ignore-errors",
      "--no-check-certificates",
    ]
  }

  static getStrategy3Args(userAgent, cookieFile) {
    const args = [
      "--user-agent",
      userAgent,
      "--referer",
      "https://www.youtube.com/",
      "--add-header",
      "Accept-Language:en-US,en;q=0.9",
      "--sleep-interval",
      "3",
      "--max-sleep-interval",
      "7",
      "--extractor-retries",
      "2",
      "--fragment-retries",
      "2",
      "--retry-sleep",
      "5",
      "--no-warnings",
      "--no-playlist",
      "--geo-bypass",
      "--ignore-errors",
      "--no-check-certificates",
      "--compat-options",
      "all",
    ]

    if (cookieFile) {
      args.push("--cookies", cookieFile)
    }

    return args
  }
}

// üïê FUN√á√ÉO SIMPLES PARA VERIFICAR DURA√á√ÉO
function checkDuration(duration) {
  if (!duration || duration <= 0) {
    return { allowed: true, message: null }
  }

  const durationSeconds = typeof duration === "string" ? parseDurationString(duration) : duration

  if (durationSeconds > MAX_DURATION) {
    const durationFormatted = formatDuration(durationSeconds)
    const maxFormatted = formatDuration(MAX_DURATION)

    return {
      allowed: false,
      message: `V√≠deo muito longo! M√°ximo: ${maxFormatted}. Seu v√≠deo: ${durationFormatted}`,
      duration_formatted: durationFormatted,
      max_duration: maxFormatted,
    }
  }

  return {
    allowed: true,
    message: null,
    duration_formatted: formatDuration(durationSeconds),
  }
}

function parseDurationString(durationStr) {
  if (typeof durationStr === "number") return durationStr

  const parts = durationStr.toString().split(":").reverse()
  let seconds = 0

  if (parts[0]) seconds += Number.parseInt(parts[0]) || 0
  if (parts[1]) seconds += (Number.parseInt(parts[1]) || 0) * 60
  if (parts[2]) seconds += (Number.parseInt(parts[2]) || 0) * 3600

  return seconds
}

function formatDuration(seconds) {
  if (seconds < 60) {
    return `${seconds}s`
  } else if (seconds < 3600) {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return secs > 0 ? `${mins}m ${secs}s` : `${mins}m`
  } else {
    const hours = Math.floor(seconds / 3600)
    const mins = Math.floor((seconds % 3600) / 60)
    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`
  }
}

// üîç FUN√á√ÉO PARA VALIDAR FORMATO DE COOKIES
function validateCookieFormat(cookieContent, filename) {
  if (!cookieContent || cookieContent.length < 10) {
    return { valid: false, reason: "Cookie muito pequeno ou vazio" }
  }

  const lines = cookieContent.split("\n")
  let validLines = 0
  let invalidLines = 0
  const issues = []

  lines.forEach((line, index) => {
    line = line.trim()

    // Pular coment√°rios e linhas vazias
    if (!line || line.startsWith("#")) {
      return
    }

    // Formato Netscape: domain \t flag \t path \t secure \t expiration \t name \t value
    const fields = line.split("\t")

    if (fields.length >= 6) {
      validLines++

      // Verificar se o dom√≠nio faz sentido
      if (!fields[0].includes(".")) {
        issues.push(`Linha ${index + 1}: Dom√≠nio suspeito: ${fields[0]}`)
      }

      // Verificar expira√ß√£o
      const expiration = Number.parseInt(fields[4])
      if (expiration && expiration < Date.now() / 1000) {
        issues.push(`Linha ${index + 1}: Cookie expirado: ${fields[5]}`)
      }
    } else {
      invalidLines++
      issues.push(`Linha ${index + 1}: Formato inv√°lido (${fields.length} campos, precisa >= 6)`)
    }
  })

  return {
    valid: validLines > 0,
    validLines,
    invalidLines,
    issues,
    reason: validLines === 0 ? "Nenhuma linha v√°lida encontrada" : null,
  }
}

// üê¶ FUN√á√ÉO PARA VALIDAR COOKIES ESPEC√çFICOS DO TWITTER
function validateTwitterCookies(cookieContent) {
  const lines = cookieContent.split("\n")
  const foundCookies = new Set()

  lines.forEach((line) => {
    if (line.trim() && !line.startsWith("#")) {
      const fields = line.split("\t")
      if (fields.length >= 6) {
        const cookieName = fields[5] // Nome do cookie
        foundCookies.add(cookieName)
      }
    }
  })

  const criticalMissing = []
  const importantMissing = []

  // Verificar cookies cr√≠ticos
  if (!foundCookies.has("auth_token")) criticalMissing.push("auth_token")
  if (!foundCookies.has("ct0")) criticalMissing.push("ct0")

  // Verificar cookies importantes
  if (!foundCookies.has("twid")) importantMissing.push("twid")
  if (!foundCookies.has("att")) importantMissing.push("att")

  return {
    valid: criticalMissing.length === 0,
    criticalMissing,
    importantMissing,
    foundCookies: Array.from(foundCookies),
    nsfwReady: criticalMissing.length === 0,
    recommendation:
      criticalMissing.length === 0 ? "‚úÖ Pronto para NSFW" : "‚ùå Faltam cookies cr√≠ticos - fa√ßa login novamente",
  }
}

// üîç FUN√á√ÉO PARA DEBUGAR SISTEMA DE COOKIES
function debugCookieSystem() {
  console.log("\nüîç === DIAGN√ìSTICO COMPLETO DE COOKIES ===")

  // Verificar vari√°veis de ambiente
  console.log("üìã VARI√ÅVEIS DE AMBIENTE:")
  let envVarsFound = 0

  // Google Cookies
  for (let i = 1; i <= 10; i++) {
    const envVar = `GOOGLE_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      envVarsFound++
      console.log(`‚úÖ ${envVar}: ${cookieContent.length} caracteres`)

      const validation = validateCookieFormat(cookieContent, envVar)
      if (validation.valid) {
        console.log(`   ‚úÖ Formato: OK (${validation.validLines} linhas v√°lidas)`)
      } else {
        console.log(`   ‚ùå Formato: ${validation.reason}`)
        validation.issues.slice(0, 3).forEach((issue) => console.log(`   ‚ö†Ô∏è ${issue}`))
      }

      console.log(`   üìÑ Preview: ${cookieContent.substring(0, 80)}...`)
    }
  }

  // Instagram Cookies
  for (let i = 1; i <= 8; i++) {
    const envVar = `INSTAGRAM_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      envVarsFound++
      console.log(`‚úÖ ${envVar}: ${cookieContent.length} caracteres`)

      const validation = validateCookieFormat(cookieContent, envVar)
      if (validation.valid) {
        console.log(`   ‚úÖ Formato: OK (${validation.validLines} linhas v√°lidas)`)
      } else {
        console.log(`   ‚ùå Formato: ${validation.reason}`)
      }
    }
  }

  // üê¶ Twitter Cookies
  for (let i = 1; i <= 5; i++) {
    const envVar = `TWITTER_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      envVarsFound++
      console.log(`‚úÖ ${envVar}: ${cookieContent.length} caracteres`)

      const validation = validateCookieFormat(cookieContent, envVar)
      const twitterValidation = validateTwitterCookies(cookieContent)

      if (validation.valid) {
        console.log(`   ‚úÖ Formato: OK (${validation.validLines} linhas v√°lidas)`)
      } else {
        console.log(`   ‚ùå Formato: ${validation.reason}`)
      }

      console.log(`   üê¶ Twitter: ${twitterValidation.recommendation}`)
      if (twitterValidation.criticalMissing.length > 0) {
        console.log(`   ‚ùå Faltam cr√≠ticos: ${twitterValidation.criticalMissing.join(", ")}`)
      }
    }
  }

  console.log(`üìä Total de vari√°veis encontradas: ${envVarsFound}`)

  // Verificar arquivos criados
  console.log("\nüìÅ ARQUIVOS DE COOKIE:")
  try {
    if (fs.existsSync(COOKIES_DIR)) {
      const files = fs.readdirSync(COOKIES_DIR).filter((f) => f.endsWith(".txt"))

      if (files.length === 0) {
        console.log("‚ùå Nenhum arquivo de cookie encontrado")
      } else {
        files.forEach((file) => {
          const filepath = path.join(COOKIES_DIR, file)
          const stats = fs.statSync(filepath)
          const content = fs.readFileSync(filepath, "utf8")
          const validation = validateCookieFormat(content, file)

          console.log(`üìÑ ${file}:`)
          console.log(`   üìè Tamanho: ${stats.size} bytes`)
          console.log(`   üìù Linhas: ${content.split("\n").length}`)
          console.log(`   ${validation.valid ? "‚úÖ" : "‚ùå"} Formato: ${validation.valid ? "OK" : validation.reason}`)

          // üê¶ Valida√ß√£o espec√≠fica para Twitter
          if (file.startsWith("twitter_")) {
            const twitterValidation = validateTwitterCookies(content)
            console.log(`   üê¶ NSFW: ${twitterValidation.nsfwReady ? "‚úÖ PRONTO" : "‚ùå FALTAM COOKIES"}`)
          }

          if (validation.issues.length > 0) {
            console.log(`   ‚ö†Ô∏è Problemas: ${validation.issues.length}`)
          }
        })
      }
    } else {
      console.log("‚ùå Diret√≥rio de cookies n√£o existe")
    }
  } catch (error) {
    console.error("‚ùå Erro ao ler cookies:", error.message)
  }

  // Verificar pools
  console.log("\nüç™ POOLS DE COOKIES:")
  console.log(`üîµ Google Pool: ${googleCookiePool.length} arquivos`)
  console.log(`üì∏ Instagram Pool: ${instagramCookiePool.length} arquivos`)
  console.log(`üê¶ Twitter Pool: ${twitterCookiePool.length} arquivos`)
  console.log(`üìä General Pool: ${generalCookiePool.length} arquivos`)

  if (googleCookiePool.length === 0 && instagramCookiePool.length === 0 && twitterCookiePool.length === 0) {
    console.log("‚ùå NENHUM COOKIE CARREGADO!")
    console.log("üí° Verifique se as vari√°veis de ambiente est√£o corretas")
  }

  console.log("üîç === FIM DO DIAGN√ìSTICO ===\n")
}

// üõ°Ô∏è MIDDLEWARE DE SEGURAN√áA
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        imgSrc: ["'self'", "data:", "https:"],
      },
    },
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true,
    },
  }),
)

// üö® CORS CONFIGURA√á√ÉO CR√çTICA - CORRIGIDA PARA EVITAR SLEEP MODE ISSUES
app.use(
  cors({
    origin: [
      "http://localhost:3000",
      "http://127.0.0.1:3000",
      "https://www.waifuconvert.com",
      "https://waifuconvert.com",
      "https://waifuconvert.vercel.app",
    ],
    credentials: true,
    optionsSuccessStatus: 200,
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization", "Accept", "Origin", "X-Requested-With"],
    exposedHeaders: ["Content-Length", "Content-Type"],
    preflightContinue: false,
  }),
)

// üö® CORS PREFLIGHT HANDLER - GARANTIR QUE SEMPRE RESPONDA
app.options("*", (req, res) => {
  res.header("Access-Control-Allow-Origin", req.headers.origin || "*")
  res.header("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE,OPTIONS")
  res.header(
    "Access-Control-Allow-Headers",
    "Content-Type, Authorization, Content-Length, X-Requested-With, Accept, Origin",
  )
  res.header("Access-Control-Allow-Credentials", "true")
  res.sendStatus(200)
})

// üõ°Ô∏è RATE LIMITING MAIS AMIG√ÅVEL
const downloadLimiter = rateLimit({
  windowMs: 10 * 60 * 1000,
  max: 20,
  message: {
    error: "Muitas tentativas de download. Tente novamente em alguns minutos.",
    type: "rate_limit_exceeded",
  },
  standardHeaders: true,
  legacyHeaders: false,
})

const generalLimiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 60,
  message: {
    error: "Muitas requisi√ß√µes. Tente novamente em 1 minuto.",
    type: "rate_limit_exceeded",
  },
})

app.use(generalLimiter)
app.use("/download", downloadLimiter)

// üß† MIDDLEWARE PARA RASTREAR ATIVIDADE (PARA SLEEP MODE) - MAIS TOLERANTE
app.use((req, res, next) => {
  lastActivity = Date.now()
  console.log(`üåê Request: ${req.method} ${req.path} - Activity updated`)
  next()
})

// üõ°Ô∏è VALIDA√á√ÉO DE URL SEGURA
function isValidUrl(url) {
  try {
    if (
      !validator.isURL(url, {
        protocols: ["http", "https"],
        require_protocol: true,
        require_valid_protocol: true,
        allow_underscores: true,
        allow_trailing_dot: false,
        allow_protocol_relative_urls: false,
        allow_fragments: true,
        allow_query_components: true,
      })
    ) {
      return false
    }

    const parsedUrl = new URL(url)
    const hostname = parsedUrl.hostname.toLowerCase()

    const isAllowedDomain = ALLOWED_DOMAINS.some((domain) => {
      if (hostname === domain) return true
      if (hostname.endsWith("." + domain)) return true
      if (domain === "tiktok.com" && (hostname.includes("tiktok") || hostname.includes("musically"))) return true
      if (domain === "twitter.com" && hostname.includes("twimg")) return true
      if (domain === "youtube.com" && (hostname.includes("youtube") || hostname.includes("youtu"))) return true
      if (domain === "instagram.com" && (hostname.includes("instagram") || hostname.includes("cdninstagram")))
        return true
      return false
    })

    if (!isAllowedDomain) {
      console.warn(`üö´ Dom√≠nio n√£o permitido: ${hostname}`)
      return false
    }

    const privateIpPatterns = [
      /^127\./,
      /^192\.168\./,
      /^10\./,
      /^172\.(1[6-9]|2[0-9]|3[0-1])\./,
      /^0\.0\.0\.0$/,
      /^localhost$/i,
    ]

    const isPrivateIp = privateIpPatterns.some((pattern) => pattern.test(hostname))
    if (isPrivateIp) {
      console.warn(`üö´ IP privado/local bloqueado: ${hostname}`)
      return false
    }

    return true
  } catch (error) {
    console.error("‚ùå Erro na valida√ß√£o de URL:", error.message)
    return false
  }
}

function sanitizeInput(input, maxLength = 100) {
  if (typeof input !== "string") return ""
  return input
    .trim()
    .substring(0, maxLength)
    .replace(/[<>"'&]/g, "")
    .replace(/\0/g, "")
}

function generateSecureFilename(title, quality, format, uniqueId) {
  const safeTitle =
    sanitizeInput(title, 50)
      .replace(/[^\w\s\-_.()]/g, "")
      .replace(/\s+/g, "_")
      .replace(/_{2,}/g, "_")
      .trim() || "WaifuConvert"

  const qualLabel = format === "mp3" ? `${quality || "best"}kbps` : `${quality || "best"}p`
  const ext = format === "mp3" ? "mp3" : "mp4"

  return `${safeTitle}-${qualLabel}-${uniqueId}.${ext}`
}

// üõ°Ô∏è VALIDA√á√ÉO MAIS AMIG√ÅVEL - CORRIGIDA COM 144P
function validateDownloadParams(url, format, quality) {
  const errors = []

  if (!url || typeof url !== "string") {
    errors.push("Por favor, cole um link v√°lido")
  } else if (!isValidUrl(url)) {
    try {
      const hostname = new URL(url).hostname.toLowerCase()
      if (hostname.includes("localhost") || hostname.startsWith("127.") || hostname.startsWith("192.168.")) {
        errors.push("Links locais n√£o s√£o permitidos por seguran√ßa")
      } else {
        errors.push(
          `Este site n√£o √© suportado ainda. Tente: TikTok, Twitter/X, Instagram, YouTube, Reddit, Facebook, Twitch, SoundCloud, Vimeo`,
        )
      }
    } catch {
      errors.push("Link inv√°lido. Certifique-se de copiar a URL completa (com https://)")
    }
  }

  if (!format || !["mp3", "mp4"].includes(format)) {
    errors.push("Escolha MP3 (√°udio) ou MP4 (v√≠deo)")
  }

  if (quality) {
    const q = Number.parseInt(quality)
    if (format === "mp3" && (q < 64 || q > 320)) {
      errors.push("Qualidade de √°udio deve estar entre 64 e 320 kbps")
    } else if (format === "mp4" && ![144, 360, 480, 720, 1080].includes(q)) {
      // ‚úÖ ADICIONADO 144P
      errors.push("Qualidade de v√≠deo deve ser 144p, 360p, 480p, 720p ou 1080p")
    }
  }

  return errors
}

function executeSecureCommand(command, args, options = {}) {
  return new Promise((resolve, reject) => {
    const timeout = options.timeout || 600000

    console.log("üöÄ Executando comando seguro:", command, args.slice(0, 3).join(" "), "...")

    const child = spawn(command, args, {
      stdio: ["ignore", "pipe", "pipe"],
      timeout: timeout,
      killSignal: "SIGKILL",
    })

    let stdout = ""
    let stderr = ""

    child.stdout.on("data", (data) => {
      stdout += data.toString()
    })

    child.stderr.on("data", (data) => {
      stderr += data.toString()
    })

    child.on("close", (code) => {
      if (code === 0) {
        resolve({ stdout, stderr })
      } else {
        reject(new Error(`Comando falhou com c√≥digo ${code}: ${stderr}`))
      }
    })

    child.on("error", (error) => {
      reject(error)
    })

    const timeoutId = setTimeout(() => {
      child.kill("SIGKILL")
      reject(new Error("Comando excedeu tempo limite"))
    }, timeout)

    child.on("close", () => {
      clearTimeout(timeoutId)
    })
  })
}

const ytDlpPath = "yt-dlp"

// üîß FUN√á√ÉO CORRIGIDA - REMOVIDA VERIFICA√á√ÉO DE '=' INCORRETA
function createSecureCookieFiles() {
  console.log("üõ°Ô∏è Criando arquivos de cookie seguros...")

  if (!fs.existsSync(COOKIES_DIR)) {
    fs.mkdirSync(COOKIES_DIR, { recursive: true, mode: 0o700 })
  }

  let cookiesCreated = 0

  // Google Cookies - CORRE√á√ÉO APLICADA
  for (let i = 1; i <= 10; i++) {
    const envVar = `GOOGLE_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      console.log(`üîç Processando ${envVar}: ${cookieContent.length} caracteres`)

      const filename = `google_conta${i.toString().padStart(2, "0")}.txt`
      const filepath = path.join(COOKIES_DIR, filename)

      // üîß CORRE√á√ÉO: Removida verifica√ß√£o incorreta de '=' - cookies Netscape s√£o v√°lidos sem '='
      if (cookieContent.length > 100) {
        // Apenas verificar tamanho m√≠nimo razo√°vel
        // üîç VALIDAR FORMATO ANTES DE SALVAR
        const validation = validateCookieFormat(cookieContent, filename)

        fs.writeFileSync(filepath, cookieContent, { mode: 0o600 })
        console.log(`‚úÖ Cookie Google ${i} criado: ${filename}`)

        if (validation.valid) {
          console.log(`   ‚úÖ Formato v√°lido: ${validation.validLines} linhas`)
        } else {
          console.log(`   ‚ö†Ô∏è Formato suspeito: ${validation.reason}`)
          // MAS AINDA ASSIM CRIAR O ARQUIVO - pode ser v√°lido mesmo com aviso
        }

        cookiesCreated++
      } else {
        console.log(`‚ùå Cookie ${envVar} muito pequeno: ${cookieContent.length} chars`)
      }
    }
  }

  // Instagram Cookies - CORRE√á√ÉO APLICADA
  for (let i = 1; i <= 8; i++) {
    const envVar = `INSTAGRAM_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      console.log(`üîç Processando ${envVar}: ${cookieContent.length} caracteres`)

      const filename = `instagram_conta${i.toString().padStart(2, "0")}.txt`
      const filepath = path.join(COOKIES_DIR, filename)

      // üîß CORRE√á√ÉO: Removida verifica√ß√£o incorreta de '='
      if (cookieContent.length > 100) {
        const validation = validateCookieFormat(cookieContent, filename)

        fs.writeFileSync(filepath, cookieContent, { mode: 0o600 })
        console.log(`‚úÖ Cookie Instagram ${i} criado: ${filename}`)

        if (validation.valid) {
          console.log(`   ‚úÖ Formato v√°lido: ${validation.validLines} linhas`)
        } else {
          console.log(`   ‚ö†Ô∏è Formato suspeito: ${validation.reason}`)
        }

        cookiesCreated++
      } else {
        console.log(`‚ùå Cookie ${envVar} muito pequeno: ${cookieContent.length} chars`)
      }
    }
  }

  // üê¶ Twitter Cookies - CORRE√á√ÉO APLICADA
  for (let i = 1; i <= 5; i++) {
    const envVar = `TWITTER_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      console.log(`üîç Processando ${envVar}: ${cookieContent.length} caracteres`)

      const filename = `twitter_conta${i.toString().padStart(2, "0")}.txt`
      const filepath = path.join(COOKIES_DIR, filename)

      // üîß CORRE√á√ÉO: Removida verifica√ß√£o incorreta de '='
      if (cookieContent.length > 100) {
        const validation = validateCookieFormat(cookieContent, filename)
        const twitterValidation = validateTwitterCookies(cookieContent)

        fs.writeFileSync(filepath, cookieContent, { mode: 0o600 })
        console.log(`‚úÖ Cookie Twitter ${i} criado: ${filename}`)

        if (validation.valid) {
          console.log(`   ‚úÖ Formato v√°lido: ${validation.validLines} linhas`)
        } else {
          console.log(`   ‚ö†Ô∏è Formato suspeito: ${validation.reason}`)
        }

        // üê¶ Valida√ß√£o espec√≠fica do Twitter
        console.log(`   üê¶ ${twitterValidation.recommendation}`)
        if (twitterValidation.nsfwReady) {
          console.log(`   üîû NSFW habilitado - cookies cr√≠ticos presentes`)
        } else {
          console.log(`   ‚ùå NSFW n√£o dispon√≠vel - faltam: ${twitterValidation.criticalMissing.join(", ")}`)
        }

        cookiesCreated++
      } else {
        console.log(`‚ùå Cookie ${envVar} muito pequeno: ${cookieContent.length} chars`)
      }
    }
  }

  console.log(`üéØ Total de cookies criados: ${cookiesCreated}`)

  // üîç EXECUTAR DIAGN√ìSTICO COMPLETO AP√ìS 2 SEGUNDOS
  setTimeout(() => {
    debugCookieSystem()
  }, 2000)

  return cookiesCreated
}

let googleCookiePool = []
let instagramCookiePool = []
let twitterCookiePool = [] // üê¶ NOVO POOL TWITTER
let generalCookiePool = []

function loadCookiePool() {
  try {
    if (!fs.existsSync(COOKIES_DIR)) {
      fs.mkdirSync(COOKIES_DIR, { recursive: true })
      return
    }

    const files = fs.readdirSync(COOKIES_DIR).filter((file) => file.endsWith(".txt"))

    googleCookiePool = files.filter((f) => f.startsWith("google_")).map((f) => path.join(COOKIES_DIR, f))
    instagramCookiePool = files.filter((f) => f.startsWith("instagram_")).map((f) => path.join(COOKIES_DIR, f))
    twitterCookiePool = files.filter((f) => f.startsWith("twitter_")).map((f) => path.join(COOKIES_DIR, f)) // üê¶ NOVO
    generalCookiePool = files.map((file) => path.join(COOKIES_DIR, file))

    console.log(`üîµ Google cookies: ${googleCookiePool.length}`)
    console.log(`üì∏ Instagram cookies: ${instagramCookiePool.length}`)
    console.log(`üê¶ Twitter cookies: ${twitterCookiePool.length}`) // üê¶ NOVO
    console.log(`üç™ Total cookies: ${generalCookiePool.length}`)
  } catch (error) {
    console.error("‚ùå Erro ao carregar cookies:", error)
  }
}

function detectPlatform(url) {
  try {
    const hostname = new URL(url).hostname.toLowerCase()
    if (hostname.includes("tiktok")) return "tiktok"
    if (hostname.includes("twitter") || hostname.includes("x.com")) return "twitter"
    if (hostname.includes("youtube") || hostname.includes("youtu.be")) return "youtube"
    if (hostname.includes("instagram")) return "instagram"
    if (hostname.includes("reddit")) return "reddit"
    if (hostname.includes("facebook")) return "facebook"
    return "unknown"
  } catch (error) {
    return "unknown"
  }
}

// üîç VERS√ÉO COM DEBUG da fun√ß√£o getSmartCookie - ATUALIZADA COM TWITTER
function getSmartCookie(platform) {
  let pool = []
  let poolName = ""

  switch (platform.toLowerCase()) {
    case "youtube":
    case "reddit":
      pool = googleCookiePool
      poolName = "Google"
      break
    case "twitter":
    case "x":
      // üê¶ PRIORIZAR COOKIES ESPEC√çFICOS DO TWITTER
      pool = twitterCookiePool.length > 0 ? twitterCookiePool : googleCookiePool
      poolName = twitterCookiePool.length > 0 ? "Twitter" : "Google (fallback)"
      break
    case "instagram":
      pool = instagramCookiePool
      poolName = "Instagram"
      break
    default:
      pool = generalCookiePool
      poolName = "General"
  }

  if (pool.length === 0) {
    console.log(`üç™ Nenhum cookie ${poolName} dispon√≠vel para ${platform}`)
    return null
  }

  const selected = pool[Math.floor(Math.random() * pool.length)]
  console.log(`üç™ Cookie selecionado para ${platform}: ${path.basename(selected)} (pool: ${poolName})`)

  // üê¶ Log especial para Twitter
  if (platform === "twitter" && poolName === "Twitter") {
    console.log(`   üîû Cookie Twitter espec√≠fico - NSFW habilitado`)
  }

  return selected
}

function getRandomFromPool(pool) {
  if (pool.length === 0) return null
  return pool[Math.floor(Math.random() * pool.length)]
}

function getRandomUserAgent() {
  return userAgents[Math.floor(Math.random() * userAgents.length)]
}

// üéØ SELETOR DE FORMATO CORRIGIDO COM 144P
function getFormatSelector(format, quality, platform) {
  if (format === "mp3") {
    return "bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio/best"
  }

  const q = Number.parseInt(quality)

  if (platform === "tiktok") {
    if (q >= 1080) return "best[height<=1080][ext=mp4]/best[height<=1080]/best[ext=mp4]/best"
    if (q >= 720) return "best[height<=720][ext=mp4]/best[height<=720]/best[ext=mp4]/best"
    if (q >= 480) return "best[height<=480][ext=mp4]/best[height<=480]/best[ext=mp4]/best"
    if (q >= 360) return "best[height<=360][ext=mp4]/best[height<=360]/best[ext=mp4]/best"
    return "best[height<=144][ext=mp4]/best[height<=144]/best[ext=mp4]/best"
  }

  if (platform === "instagram") {
    if (q >= 1080) return "best[height<=1080][ext=mp4]/best[height<=1080]/best[ext=mp4]/best"
    if (q >= 720) return "best[height<=720][ext=mp4]/best[height<=720]/best[ext=mp4]/best"
    if (q >= 480) return "best[height<=480][ext=mp4]/best[height<=480]/best[ext=mp4]/best"
    if (q >= 360) return "best[height<=360][ext=mp4]/best[height<=360]/best[ext=mp4]/best"
    return "best[height<=144][ext=mp4]/best[height<=144]/best[ext=mp4]/best"
  }

  // YouTube, Twitter e outras plataformas - ADICIONADO 144P
  if (q >= 1080) {
    return "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=1080]+bestaudio/best[height<=1080][ext=mp4]/best[height<=1080]/best[ext=mp4]/best"
  } else if (q >= 720) {
    return "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=720]+bestaudio/best[height<=720][ext=mp4]/best[height<=720]/best[ext=mp4]/best"
  } else if (q >= 480) {
    return "bestvideo[height<=480][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=480]+bestaudio/best[height<=480][ext=mp4]/best[height<=480]/best[ext=mp4]/best"
  } else if (q >= 360) {
    return "bestvideo[height<=360][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=360]+bestaudio/best[height<=360][ext=mp4]/best[height<=360]/best[ext=mp4]/best"
  } else {
    // ‚úÖ ADICIONADO SUPORTE PARA 144P
    return "bestvideo[height<=144][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=144]+bestaudio/best[height<=144][ext=mp4]/best[height<=144]/best[ext=mp4]/best"
  }
}

// üîß COMANDO SEGURO CORRIGIDO - SEM IMPERSONATION E LEGENDAS OPCIONAIS
function buildSecureCommand(userAgent, cookieFile, platform) {
  const baseArgs = [
    "--user-agent",
    userAgent,
    "--no-playlist",
    "--no-check-certificates",
    "--prefer-insecure",
    "--extractor-retries",
    "3",
    "--fragment-retries",
    "3",
    "--retry-sleep",
    "1",
    "--no-call-home",
    "--geo-bypass",
    "--ignore-errors", // üîß IGNORAR ERROS N√ÉO CR√çTICOS
    "--add-header",
    "Accept-Language:en-US,en;q=0.9",
    "--add-header",
    "Accept-Encoding:gzip, deflate",
    "--add-header",
    "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "--add-header",
    "Connection:keep-alive",
    "--add-header",
    "Upgrade-Insecure-Requests:1",
  ]

  if (platform === "tiktok") {
    baseArgs.push("--fragment-retries", "10", "--retry-sleep", "2", "--no-part", "--concurrent-fragments", "1")
  }

  if (platform === "instagram") {
    baseArgs.push(
      "--sleep-interval",
      "2",
      "--max-sleep-interval",
      "5",
      "--extractor-retries",
      "5",
      "--fragment-retries",
      "5",
      "--retry-sleep",
      "3",
    )
  }

  // üê¶ CONFIGURA√á√ïES ESPEC√çFICAS PARA TWITTER
  if (platform === "twitter") {
    baseArgs.push(
      "--sleep-interval",
      "1",
      "--max-sleep-interval",
      "3",
      "--extractor-retries",
      "5",
      "--fragment-retries",
      "5",
      "--retry-sleep",
      "2",
    )
  }

  if (cookieFile) {
    baseArgs.push("--cookies", cookieFile)
  }

  return baseArgs
}

function isAuthenticationError(errorMessage) {
  const authErrors = [
    "requires authentication",
    "requiring login",
    "NSFW tweet",
    "private video",
    "private account",
    "login required",
    "sign in to confirm",
    "cookies",
    "Use --cookies",
    "not a bot",
    "captcha",
    "verification",
    "blocked",
    "rate limit",
    "requested content is not available",
    "rate-limit reached",
    "General metadata extraction failed",
    "unable to extract shared data",
    "The following content is not available on this app", // üéØ YOUTUBE ESPEC√çFICO
    "Watch on the latest version of YouTube", // üéØ YOUTUBE ESPEC√çFICO
  ]

  return authErrors.some((error) => errorMessage.toLowerCase().includes(error.toLowerCase()))
}

// üîß FUN√á√ÉO PARA DETECTAR ERROS N√ÉO CR√çTICOS
function isNonCriticalError(errorMessage) {
  const nonCriticalErrors = [
    "impersonation",
    "impersonate target",
    "subtitle",
    "Unable to download video subtitles",
    "HTTP Error 429",
    "Too Many Requests",
    "WARNING:",
  ]

  return nonCriticalErrors.some((error) => errorMessage.toLowerCase().includes(error.toLowerCase()))
}

// üéØ CORRE√á√ÉO YOUTUBE: Fun√ß√£o para tentar m√∫ltiplas estrat√©gias
async function tryYouTubeDownloadStrategies(url, format, quality, uniqueId) {
  const strategies = [
    { name: "Estrat√©gia 1: Cookies + Headers otimizados", useStrategy: 1 },
    { name: "Estrat√©gia 2: Sem cookies + Bypass", useStrategy: 2 },
    { name: "Estrat√©gia 3: Modo compatibilidade", useStrategy: 3 },
  ]

  for (const strategy of strategies) {
    try {
      console.log(`üéØ YouTube: Tentando ${strategy.name}`)

      const cookieFile = strategy.useStrategy === 2 ? null : getSmartCookie("youtube")
      const randomUA = getRandomUserAgent()

      let baseArgs
      switch (strategy.useStrategy) {
        case 1:
          baseArgs = YouTubeBypassStrategies.getStrategy1Args(randomUA, cookieFile)
          break
        case 2:
          baseArgs = YouTubeBypassStrategies.getStrategy2Args(randomUA)
          break
        case 3:
          baseArgs = YouTubeBypassStrategies.getStrategy3Args(randomUA, cookieFile)
          break
      }

      // Primeiro, tentar obter informa√ß√µes
      const jsonArgs = [...baseArgs, "-j", url]
      const { stdout: jsonStdout } = await executeSecureCommand(ytDlpPath, jsonArgs, { timeout: 45000 })

      const jsonLine = jsonStdout.split("\n").find((line) => line.trim().startsWith("{"))
      if (!jsonLine) throw new Error("Nenhuma linha JSON encontrada")

      const data = JSON.parse(jsonLine)

      // Verificar dura√ß√£o
      const durationCheck = checkDuration(data.duration)
      if (!durationCheck.allowed) {
        throw new Error(durationCheck.message)
      }

      // Preparar download
      const safeTitle = generateSecureFilename(data.title, quality, format, uniqueId)
      const outputPath = path.join(DOWNLOADS, safeTitle)

      let downloadArgs
      if (format === "mp3") {
        const q = Number.parseInt(quality || "128")
        const formatSelector = getFormatSelector("mp3", quality, "youtube")
        downloadArgs = [
          ...baseArgs,
          "-f",
          formatSelector,
          "--extract-audio",
          "--audio-format",
          "mp3",
          "--audio-quality",
          `${q}k`,
          "--add-metadata",
          "--embed-thumbnail",
          "-o",
          outputPath,
          url,
        ]
      } else {
        const formatSelector = getFormatSelector("mp4", quality, "youtube")
        downloadArgs = [
          ...baseArgs,
          "-f",
          formatSelector,
          "--merge-output-format",
          "mp4",
          "--add-metadata",
          "-o",
          outputPath,
          url,
        ]
      }

      console.log(`üöÄ YouTube: Executando download com ${strategy.name}`)
      await executeSecureCommand(ytDlpPath, downloadArgs, { timeout: 600000 })

      // Verificar se arquivo foi criado
      let finalFilePath = outputPath
      if (!fs.existsSync(finalFilePath)) {
        finalFilePath = findRecentFile(DOWNLOADS, Date.now(), [`.${format === "mp3" ? "mp3" : "mp4"}`])
        if (!finalFilePath) {
          throw new Error("Arquivo n√£o foi criado")
        }
      }

      const stats = fs.statSync(finalFilePath)
      if (stats.size < 1000) {
        throw new Error("Arquivo gerado est√° corrompido ou vazio")
      }

      console.log(`‚úÖ YouTube: Sucesso com ${strategy.name}!`)
      return {
        success: true,
        data,
        finalFilePath,
        stats,
        durationCheck,
        strategy: strategy.name,
      }
    } catch (error) {
      console.log(`‚ùå YouTube: ${strategy.name} falhou: ${error.message}`)

      // Se for o √∫ltimo m√©todo, lan√ßar erro
      if (strategy === strategies[strategies.length - 1]) {
        throw new Error(`Todas as estrat√©gias do YouTube falharam. √öltimo erro: ${error.message}`)
      }

      // Aguardar antes da pr√≥xima tentativa
      await new Promise((resolve) => setTimeout(resolve, 2000))
    }
  }
}

const fileMap = new Map()

function findRecentFile(baseDir, timestamp, extensions = [".mp4", ".mp3"]) {
  try {
    const files = fs.readdirSync(baseDir)
    const recentFiles = files.filter((file) => {
      const filePath = path.join(baseDir, file)
      const stats = fs.statSync(filePath)
      const fileTime = stats.birthtime.getTime()
      const timeDiff = Math.abs(fileTime - timestamp)

      return timeDiff < 300000 && extensions.some((ext) => file.toLowerCase().endsWith(ext))
    })

    if (recentFiles.length > 0) {
      recentFiles.sort((a, b) => {
        const aTime = fs.statSync(path.join(baseDir, a)).birthtime.getTime()
        const bTime = fs.statSync(path.join(baseDir, b)).birthtime.getTime()
        return bTime - aTime
      })
      return path.join(baseDir, recentFiles[0])
    }
  } catch (error) {
    console.error("‚ùå Erro ao procurar arquivo:", error)
  }
  return null
}

function cleanupOldFiles() {
  try {
    const files = fs.readdirSync(DOWNLOADS)
    const oneHourAgo = Date.now() - 60 * 60 * 1000

    files.forEach((file) => {
      const filePath = path.join(DOWNLOADS, file)
      const stats = fs.statSync(filePath)

      if (stats.mtime.getTime() < oneHourAgo) {
        fs.unlinkSync(filePath)
        console.log("üóëÔ∏è Arquivo antigo removido:", file)

        for (const [key, value] of fileMap.entries()) {
          if (value.actualPath === filePath) {
            fileMap.delete(key)
            break
          }
        }
      }
    })
  } catch (error) {
    console.error("‚ùå Erro ao limpar arquivos:", error.message)
  }
}

app.use(express.json({ limit: "10mb" }))

if (!fs.existsSync(DOWNLOADS)) {
  fs.mkdirSync(DOWNLOADS, { recursive: true, mode: 0o755 })
}

if (!fs.existsSync(COOKIES_DIR)) {
  fs.mkdirSync(COOKIES_DIR, { recursive: true, mode: 0o700 })
}

// üõ°Ô∏è ROTA PRINCIPAL CORRIGIDA - CONTADOR E ERROS FIXADOS + DEBUG DE COOKIES + TWITTER + YOUTUBE FIX
app.post("/download", async (req, res) => {
  const startTime = Date.now()
  let downloadStarted = false // üîß FLAG PARA CONTROLAR CONTADOR

  try {
    console.log(`üåê POST /download - CORS headers should be set automatically`)

    if (activeDownloads >= MAX_CONCURRENT_DOWNLOADS) {
      return res.status(429).json({
        error: "Servidor ocupado no momento. Tente novamente em 1-2 minutos.",
        type: "server_busy",
        tip: "Muitas pessoas est√£o usando o servi√ßo agora. üòä",
      })
    }

    const { url, format, quality } = req.body

    const validationErrors = validateDownloadParams(url, format, quality)
    if (validationErrors.length > 0) {
      return res.status(400).json({
        error: "Par√¢metros inv√°lidos",
        details: validationErrors,
      })
    }

    // üîß INCREMENTAR CONTADOR APENAS AP√ìS VALIDA√á√ÉO
    activeDownloads++
    downloadStarted = true
    console.log(`üöÄ Downloads ativos: ${activeDownloads}/${MAX_CONCURRENT_DOWNLOADS}`)

    const detectedPlatform = detectPlatform(url)
    const uniqueId = crypto.randomBytes(8).toString("hex")

    console.log("üéØ Nova requisi√ß√£o segura:", {
      url: url.substring(0, 50) + "...",
      format,
      quality,
      platform: detectedPlatform,
    })

    // üéØ CORRE√á√ÉO YOUTUBE: Usar estrat√©gias espec√≠ficas para YouTube
    if (detectedPlatform === "youtube") {
      try {
        console.log("üéØ Detectado YouTube - usando estrat√©gias avan√ßadas de bypass")

        // Atualizar yt-dlp se poss√≠vel
        await ensureYtDlpUpdated()

        const result = await tryYouTubeDownloadStrategies(url, format, quality, uniqueId)

        const actualFilename = path.basename(result.finalFilePath)
        const downloadKey = `download_${crypto.randomBytes(16).toString("hex")}.${format === "mp3" ? "mp3" : "mp4"}`

        fileMap.set(downloadKey, {
          actualPath: result.finalFilePath,
          actualFilename: actualFilename,
          userFriendlyName: `${result.data.title.substring(0, 50)} - ${format === "mp3" ? quality + "kbps" : quality + "p"}.${format === "mp3" ? "mp3" : "mp4"}`,
          size: result.stats.size,
          created: Date.now(),
        })

        console.log("‚úÖ YouTube download conclu√≠do com sucesso:", {
          platform: detectedPlatform,
          downloadKey: downloadKey,
          size: `${(result.stats.size / 1024 / 1024).toFixed(2)} MB`,
          duration: result.durationCheck.duration_formatted || "N/A",
          strategy: result.strategy,
        })

        return res.json({
          file: `/downloads/${downloadKey}`,
          filename: `${result.data.title.substring(0, 50)} - ${format === "mp3" ? quality + "kbps" : quality + "p"}.${format === "mp3" ? "mp3" : "mp4"}`,
          size: result.stats.size,
          title: result.data.title,
          duration: result.data.duration,
          duration_formatted: result.durationCheck.duration_formatted,
          platform: detectedPlatform,
          quality_achieved: format === "mp3" ? `${quality}kbps` : `${quality}p`,
          used_strategy: result.strategy,
          youtube_fix_applied: true,
        })
      } catch (error) {
        console.error("‚ùå Todas as estrat√©gias do YouTube falharam:", error.message)

        return res.status(500).json({
          error: "YouTube temporariamente indispon√≠vel. Tente novamente em alguns minutos.",
          type: "youtube_blocked",
          platform: "youtube",
          suggestion: "O YouTube est√° bloqueando downloads no momento. Tente outro v√≠deo ou aguarde alguns minutos.",
          technical_details: error.message.substring(0, 200),
        })
      }
    }

    // üîÑ L√ìGICA ORIGINAL PARA OUTRAS PLATAFORMAS (TikTok, Twitter, Instagram, etc.)
    const cookieFile = getSmartCookie(detectedPlatform) // üîç J√Å COM DEBUG + TWITTER
    const randomUA = getRandomUserAgent()

    // üîç LOG DETALHADO DE COOKIE
    console.log("üç™ Informa√ß√µes de cookie:", {
      platform: detectedPlatform,
      cookieFile: cookieFile ? path.basename(cookieFile) : "NENHUM",
      cookieExists: cookieFile ? fs.existsSync(cookieFile) : false,
      cookieSize: cookieFile && fs.existsSync(cookieFile) ? fs.statSync(cookieFile).size : 0,
    })

    const jsonArgs = [...buildSecureCommand(randomUA, cookieFile, detectedPlatform), "-j", url]

    try {
      const { stdout: jsonStdout, stderr: jsonStderr } = await executeSecureCommand(ytDlpPath, jsonArgs, {
        timeout: 45000,
      })

      let data
      try {
        const jsonLine = jsonStdout.split("\n").find((line) => line.trim().startsWith("{"))
        if (!jsonLine) throw new Error("Nenhuma linha JSON encontrada")
        data = JSON.parse(jsonLine)
      } catch (e) {
        console.error("‚ùå Erro ao parsear JSON:", e)
        return res.status(500).json({ error: "Resposta JSON inv√°lida" })
      }

      const durationCheck = checkDuration(data.duration)
      if (!durationCheck.allowed) {
        console.log("üö´ V√≠deo rejeitado por dura√ß√£o:", durationCheck.message)
        return res.status(400).json({
          error: durationCheck.message,
          type: "duration_exceeded",
          video_duration: durationCheck.duration_formatted,
          max_duration: durationCheck.max_duration,
          suggestion: "Tente um v√≠deo mais curto (m√°ximo 2 horas para qualquer formato)",
        })
      }

      if (data.filesize && data.filesize > MAX_FILE_SIZE) {
        return res.status(400).json({
          error: "Arquivo muito grande. M√°ximo permitido: 1GB",
          type: "file_too_large",
        })
      }

      const safeTitle = generateSecureFilename(data.title, quality, format, uniqueId)
      const outputPath = path.join(DOWNLOADS, safeTitle)

      console.log("üìÅ Arquivo aprovado:", {
        title: data.title.substring(0, 30) + "...",
        duration: durationCheck.duration_formatted || "N/A",
        filename: safeTitle,
      })

      let downloadArgs
      if (format === "mp3") {
        const q = Number.parseInt(quality || "128")
        const formatSelector = getFormatSelector("mp3", quality, detectedPlatform)
        downloadArgs = [
          ...buildSecureCommand(randomUA, cookieFile, detectedPlatform),
          "-f",
          formatSelector,
          "--extract-audio",
          "--audio-format",
          "mp3",
          "--audio-quality",
          `${q}k`,
          "--add-metadata",
          "--embed-thumbnail",
          "-o",
          outputPath,
          url,
        ]
      } else {
        const formatSelector = getFormatSelector("mp4", quality, detectedPlatform)

        if (detectedPlatform === "tiktok" || detectedPlatform === "instagram") {
          downloadArgs = [
            ...buildSecureCommand(randomUA, cookieFile, detectedPlatform),
            "-f",
            formatSelector,
            "--add-metadata",
            "-o",
            outputPath,
            url,
          ]
        } else {
          // üîß TWITTER E OUTRAS - SEM AUTO-SUBS PARA EVITAR RATE LIMIT
          downloadArgs = [
            ...buildSecureCommand(randomUA, cookieFile, detectedPlatform),
            "-f",
            formatSelector,
            "--merge-output-format",
            "mp4",
            "--add-metadata",
            "-o",
            outputPath,
            url,
          ]
        }
      }

      console.log("üöÄ Iniciando download seguro...")

      const { stdout: downloadStdout, stderr: downloadStderr } = await executeSecureCommand(ytDlpPath, downloadArgs, {
        timeout: 600000,
      })

      // üîß VERIFICAR SE HOUVE ERROS N√ÉO CR√çTICOS
      if (downloadStderr && isNonCriticalError(downloadStderr)) {
        console.log("‚ö†Ô∏è Avisos n√£o cr√≠ticos ignorados:", downloadStderr.substring(0, 100) + "...")
      }

      let finalFilePath = outputPath
      if (!fs.existsSync(finalFilePath)) {
        finalFilePath = findRecentFile(DOWNLOADS, startTime, [`.${format === "mp3" ? "mp3" : "mp4"}`])
        if (!finalFilePath) {
          return res.status(500).json({ error: "Arquivo n√£o foi criado" })
        }
      }

      const actualFilename = path.basename(finalFilePath)
      const stats = fs.statSync(finalFilePath)

      if (stats.size < 1000) {
        return res.status(500).json({ error: "Arquivo gerado est√° corrompido ou vazio" })
      }

      const downloadKey = `download_${crypto.randomBytes(16).toString("hex")}.${format === "mp3" ? "mp3" : "mp4"}`
      fileMap.set(downloadKey, {
        actualPath: finalFilePath,
        actualFilename: actualFilename,
        userFriendlyName: `${data.title.substring(0, 50)} - ${format === "mp3" ? quality + "kbps" : quality + "p"}.${format === "mp3" ? "mp3" : "mp4"}`,
        size: stats.size,
        created: Date.now(),
      })

      console.log("‚úÖ Download seguro conclu√≠do:", {
        platform: detectedPlatform,
        downloadKey: downloadKey,
        size: `${(stats.size / 1024 / 1024).toFixed(2)} MB`,
        duration: durationCheck.duration_formatted || "N/A",
        used_cookies: !!cookieFile,
        cookie_file: cookieFile ? path.basename(cookieFile) : "NENHUM",
      })

      res.json({
        file: `/downloads/${downloadKey}`,
        filename: `${data.title.substring(0, 50)} - ${format === "mp3" ? quality + "kbps" : quality + "p"}.${format === "mp3" ? "mp3" : "mp4"}`,
        size: stats.size,
        title: data.title,
        duration: data.duration,
        duration_formatted: durationCheck.duration_formatted,
        platform: detectedPlatform,
        quality_achieved: format === "mp3" ? `${quality}kbps` : `${quality}p`,
        used_cookies: !!cookieFile,
      })
    } catch (error) {
      console.error("‚ùå Erro no download:", error.message)

      // üîß VERIFICAR SE √â ERRO N√ÉO CR√çTICO ANTES DE FALHAR
      if (isNonCriticalError(error.message)) {
        console.log("‚ö†Ô∏è Erro n√£o cr√≠tico detectado, tentando continuar...")
        // N√£o retornar erro, deixar continuar
      } else if (isAuthenticationError(error.message)) {
        if (detectedPlatform === "instagram") {
          return res.status(400).json({
            error: "Instagram requer login. Configure cookies via environment variables.",
            type: "instagram_auth_required",
            platform: "instagram",
          })
        } else if (detectedPlatform === "twitter") {
          // üê¶ ERRO ESPEC√çFICO PARA TWITTER
          return res.status(400).json({
            error: "Conte√∫do NSFW do Twitter requer cookies de autentica√ß√£o. Configure TWITTER_COOKIE_01.",
            type: "twitter_nsfw_required",
            platform: "twitter",
            suggestion: "Use Cookie-Editor para extrair cookies do Twitter logado",
          })
        }
        return res.status(400).json({
          error: "Conte√∫do privado ou requer login.",
          type: "private_content",
        })
      } else {
        return res.status(500).json({ error: "Falha no download/convers√£o" })
      }
    }
  } catch (error) {
    console.error("‚ùå Erro inesperado:", error)
    res.status(500).json({ error: "Erro interno do servidor" })
  } finally {
    // üîß DECREMENTAR CONTADOR APENAS SE FOI INCREMENTADO
    if (downloadStarted) {
      activeDownloads = Math.max(0, activeDownloads - 1) // üîß NUNCA DEIXAR NEGATIVO
      console.log(`üìâ Downloads ativos: ${activeDownloads}/${MAX_CONCURRENT_DOWNLOADS}`)
    }
  }
})

// üß† NOVA ROTA: Status de mem√≥ria em tempo real - RAILWAY COMPATIBLE
app.get("/memory", (req, res) => {
  const memoryStats = logMemoryUsage()
  const gcMethods = []

  // Verificar m√∫ltiplos m√©todos de GC
  if (typeof global.gc === "function") {
    gcMethods.push("global.gc() dispon√≠vel")
  }

  try {
    const v8 = require("v8")
    if (v8.getHeapStatistics) {
      gcMethods.push("V8 heap statistics dispon√≠vel")
    }
  } catch (e) {
    gcMethods.push("V8 n√£o dispon√≠vel")
  }

  res.json({
    message: "üß† Status de Mem√≥ria em Tempo Real - RAILWAY OPTIMIZED",
    timestamp: new Date().toISOString(),
    memory: memoryStats,
    gc_methods: gcMethods,
    gc_available: gcMethods.length > 0,
    environment_variables: {
      NODE_OPTIONS: process.env.NODE_OPTIONS || "n√£o definido",
      NODE_ENV: process.env.NODE_ENV || "n√£o definido",
      MAX_OLD_SPACE_SIZE: process.env.MAX_OLD_SPACE_SIZE || "n√£o definido",
    },
    uptime: Math.round(process.uptime()),
    active_downloads: activeDownloads,
    last_activity: Math.round((Date.now() - lastActivity) / 1000) + "s ago",
    recommendations: [
      gcMethods.length > 0 ? "‚úÖ M√©todos de limpeza dispon√≠veis" : "‚ùå Nenhum m√©todo de GC - usando limpeza manual",
      memoryStats.heapUsed > 200 ? "‚ö†Ô∏è Alto uso de mem√≥ria - executando limpeza" : "‚úÖ Uso de mem√≥ria normal",
      activeDownloads === 0 ? "üí§ Servidor inativo - candidato para sleep mode" : "üöÄ Servidor ativo",
    ],
    railway_workaround: gcMethods.length === 0 ? "Usando limpeza manual agressiva" : "GC nativo funcionando",
  })
})

// üîç ROTA DE TESTE DE COOKIES - ATUALIZADA COM TWITTER
app.get("/test-cookies", async (req, res) => {
  console.log("üß™ === TESTE DE COOKIES INICIADO ===")

  const results = {
    environment_variables: {},
    cookie_files: {},
    pools: {
      google: googleCookiePool.length,
      instagram: instagramCookiePool.length,
      twitter: twitterCookiePool.length, // üê¶ NOVO
      general: generalCookiePool.length,
    },
    tests: {},
    recommendations: [],
  }

  // 1. Verificar vari√°veis de ambiente
  let envVarsFound = 0

  // Google
  for (let i = 1; i <= 10; i++) {
    const envVar = `GOOGLE_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      envVarsFound++
      const validation = validateCookieFormat(cookieContent, envVar)

      results.environment_variables[envVar] = {
        exists: true,
        length: cookieContent.length,
        has_equals: cookieContent.includes("="), // üîß MANTIDO PARA COMPATIBILIDADE, MAS N√ÉO USADO NA VALIDA√á√ÉO
        format_valid: validation.valid,
        valid_lines: validation.validLines,
        invalid_lines: validation.invalidLines,
        issues: validation.issues.slice(0, 3),
      }
    } else {
      results.environment_variables[envVar] = { exists: false }
    }
  }

  // Instagram
  for (let i = 1; i <= 8; i++) {
    const envVar = `INSTAGRAM_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      envVarsFound++
      const validation = validateCookieFormat(cookieContent, envVar)

      results.environment_variables[envVar] = {
        exists: true,
        length: cookieContent.length,
        has_equals: cookieContent.includes("="),
        format_valid: validation.valid,
        valid_lines: validation.validLines,
        invalid_lines: validation.invalidLines,
      }
    } else {
      results.environment_variables[envVar] = { exists: false }
    }
  }

  // üê¶ Twitter - NOVO
  for (let i = 1; i <= 5; i++) {
    const envVar = `TWITTER_COOKIE_${i.toString().padStart(2, "0")}`
    const cookieContent = process.env[envVar]

    if (cookieContent) {
      envVarsFound++
      const validation = validateCookieFormat(cookieContent, envVar)
      const twitterValidation = validateTwitterCookies(cookieContent)

      results.environment_variables[envVar] = {
        exists: true,
        length: cookieContent.length,
        has_equals: cookieContent.includes("="),
        format_valid: validation.valid,
        valid_lines: validation.validLines,
        invalid_lines: validation.invalidLines,
        twitter_nsfw_ready: twitterValidation.nsfwReady,
        twitter_critical_missing: twitterValidation.criticalMissing,
        twitter_cookies_found: twitterValidation.foundCookies,
      }
    } else {
      results.environment_variables[envVar] = { exists: false }
    }
  }

  // 2. Verificar arquivos criados
  try {
    if (fs.existsSync(COOKIES_DIR)) {
      const files = fs.readdirSync(COOKIES_DIR).filter((f) => f.endsWith(".txt"))

      for (const file of files) {
        const filepath = path.join(COOKIES_DIR, file)
        const stats = fs.statSync(filepath)
        const content = fs.readFileSync(filepath, "utf8")
        const validation = validateCookieFormat(content, file)

        results.cookie_files[file] = {
          size: stats.size,
          lines: content.split("\n").length,
          format_valid: validation.valid,
          valid_lines: validation.validLines,
          invalid_lines: validation.invalidLines,
          issues: validation.issues.slice(0, 2),
        }

        // üê¶ Valida√ß√£o espec√≠fica para Twitter
        if (file.startsWith("twitter_")) {
          const twitterValidation = validateTwitterCookies(content)
          results.cookie_files[file].twitter_nsfw_ready = twitterValidation.nsfwReady
          results.cookie_files[file].twitter_critical_missing = twitterValidation.criticalMissing
        }
      }
    }
  } catch (error) {
    results.cookie_files.error = error.message
  }

  // 3. Testar sele√ß√£o de cookies
  const platforms = ["youtube", "instagram", "twitter"] // üê¶ INCLU√çDO TWITTER

  for (const platform of platforms) {
    const selectedCookie = getSmartCookie(platform)

    results.tests[platform] = {
      cookie_selected: !!selectedCookie,
      cookie_path: selectedCookie ? path.basename(selectedCookie) : null,
      cookie_exists: selectedCookie ? fs.existsSync(selectedCookie) : false,
    }

    // üê¶ Info espec√≠fica para Twitter
    if (platform === "twitter" && selectedCookie) {
      const isTwitterSpecific = path.basename(selectedCookie).startsWith("twitter_")
      results.tests[platform].twitter_specific = isTwitterSpecific
      results.tests[platform].nsfw_capable = isTwitterSpecific
    }
  }

  // 4. Gerar recomenda√ß√µes
  if (envVarsFound === 0) {
    results.recommendations.push("‚ùå Nenhuma vari√°vel de ambiente encontrada - configure GOOGLE_COOKIE_01, etc.")
  } else {
    results.recommendations.push(`‚úÖ ${envVarsFound} vari√°veis de ambiente encontradas`)
  }

  if (results.pools.google === 0 && results.pools.instagram === 0 && results.pools.twitter === 0) {
    results.recommendations.push("‚ùå Nenhum cookie carregado - verifique formato e vari√°veis")
  } else {
    results.recommendations.push(
      `‚úÖ ${results.pools.google + results.pools.instagram + results.pools.twitter} cookies carregados`,
    )
  }

  // üê¶ Recomenda√ß√£o espec√≠fica para Twitter
  if (results.pools.twitter === 0) {
    results.recommendations.push("‚ö†Ô∏è Nenhum cookie Twitter - conte√∫do NSFW n√£o dispon√≠vel")
  } else {
    results.recommendations.push(`üê¶ ${results.pools.twitter} cookies Twitter - NSFW habilitado`)
  }

  const hasFormatIssues = Object.values(results.environment_variables).some((v) => v.exists && !v.format_valid)
  if (hasFormatIssues) {
    results.recommendations.push("‚ö†Ô∏è Alguns cookies t√™m formato inv√°lido - use formato Netscape do Cookie Editor")
  } else {
    results.recommendations.push("‚úÖ Formato dos cookies OK")
  }

  console.log("üß™ === TESTE DE COOKIES CONCLU√çDO ===")

  res.json({
    message: "üß™ Teste de Cookies Completo - RAILWAY MEMORY OPTIMIZATION + YOUTUBE FIX + CORS FIX APLICADO!",
    timestamp: new Date().toISOString(),
    summary: {
      env_vars_found: envVarsFound,
      cookies_loaded: results.pools.google + results.pools.instagram + results.pools.twitter,
      files_created: Object.keys(results.cookie_files).length,
      twitter_nsfw_ready: results.pools.twitter > 0,
      youtube_fix_applied: "‚úÖ Estrat√©gias m√∫ltiplas de bypass implementadas",
      memory_optimization_applied: "üß† Sistema de limpeza agressiva de mem√≥ria ativado (Railway compatible)",
      cors_fix_applied: "üö® CORS configurado para evitar sleep mode issues",
      fix_applied: "‚úÖ Removida verifica√ß√£o incorreta de '=' - cookies Netscape agora carregam corretamente",
    },
    results: results,
  })
})

app.get("/downloads/:fileKey", (req, res) => {
  const fileKey = sanitizeInput(req.params.fileKey, 100)

  console.log("üì• Download solicitado:", fileKey)

  const fileInfo = fileMap.get(fileKey)
  if (!fileInfo) {
    return res.status(404).json({ error: "Arquivo n√£o encontrado ou expirado" })
  }

  const { actualPath, userFriendlyName, size } = fileInfo

  if (!fs.existsSync(actualPath)) {
    fileMap.delete(fileKey)
    return res.status(404).json({ error: "Arquivo n√£o encontrado no disco" })
  }

  try {
    res.setHeader("Content-Disposition", `attachment; filename="${encodeURIComponent(userFriendlyName)}"`)
    res.setHeader("Content-Type", "application/octet-stream")
    res.setHeader("Content-Length", size)
    res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate")
    res.setHeader("Pragma", "no-cache")
    res.setHeader("Expires", "0")
    res.setHeader("X-Content-Type-Options", "nosniff")

    console.log("‚úÖ Enviando arquivo seguro:", userFriendlyName)

    const fileStream = fs.createReadStream(actualPath)

    fileStream.on("error", (error) => {
      console.error("‚ùå Erro ao ler arquivo:", error)
      if (!res.headersSent) {
        res.status(500).json({ error: "Erro ao ler arquivo" })
      }
    })

    fileStream.pipe(res)
  } catch (error) {
    console.error("‚ùå Erro na rota de download:", error)
    if (!res.headersSent) {
      res.status(500).json({ error: "Erro interno do servidor" })
    }
  }
})

app.get("/health", (req, res) => {
  const memoryStats = logMemoryUsage()

  const stats = {
    status: "OK - SECURE + RAILWAY MEMORY OPTIMIZED + YOUTUBE FIX + CORS FIXED",
    version:
      "6.2.0 - RAILWAY MEMORY OPTIMIZATION + YOUTUBE BYPASS STRATEGIES + COOKIE VALIDATION FIXED + TWITTER SUPPORT + CORS SLEEP MODE FIX",
    timestamp: new Date().toISOString(),
    limits: {
      max_duration: formatDuration(MAX_DURATION),
      max_file_size: "1GB",
      max_concurrent: MAX_CONCURRENT_DOWNLOADS,
    },
    memory_optimization: {
      gc_available: typeof global.gc !== "undefined",
      railway_workaround: typeof global.gc === "undefined" ? "Manual cleanup active" : "Native GC active",
      current_memory: memoryStats,
      sleep_mode_enabled: true,
      sleep_mode_tolerance: "20min (mais tolerante para evitar CORS issues)",
      auto_cleanup_enabled: true,
    },
    cors_configuration: {
      status: "FIXED - Configura√ß√£o robusta para evitar sleep mode issues",
      origins: ["https://www.waifuconvert.com", "https://waifuconvert.com", "https://waifuconvert.vercel.app"],
      preflight_handler: "‚úÖ Explicit OPTIONS handler implemented",
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      credentials: true,
    },
    security_features: [
      "‚úÖ Input validation",
      "‚úÖ Command injection protection",
      "‚úÖ Rate limiting",
      "‚úÖ Duration limits (2h max)",
      "‚úÖ Secure file handling",
      "‚úÖ Domain whitelist",
      "‚úÖ Resource limits",
      "‚úÖ Helmet security headers",
      "‚úÖ Counter bug fixed",
      "‚úÖ 144p quality support",
      "‚úÖ Non-critical error handling",
      "‚úÖ Cookie debugging system",
      "‚úÖ Twitter NSFW support",
      "‚úÖ Cookie validation fixed - Netscape format now works",
      "üéØ YouTube bypass strategies implemented",
      "üéØ Multiple fallback methods for YouTube",
      "üéØ Auto yt-dlp updates",
      "üß† Railway-compatible memory management",
      "üß† Multiple GC methods (native + manual)",
      "üß† Sleep mode for inactive periods",
      "üö® CORS configuration fixed for sleep mode compatibility",
    ],
    cookies_loaded: {
      google: googleCookiePool.length,
      instagram: instagramCookiePool.length,
      twitter: twitterCookiePool.length,
      total: generalCookiePool.length,
    },
    active_downloads: activeDownloads,
    uptime: process.uptime(),
  }

  res.json(stats)
})

app.get("/", (req, res) => {
  res.json({
    message:
      "üõ°Ô∏è WaifuConvert Backend - RAILWAY MEMORY OPTIMIZED + YOUTUBE FIX + COOKIE VALIDATION FIXED + TWITTER NSFW + CORS SLEEP MODE FIX!",
    version: "6.2.0",
    status:
      "online - security active + railway memory optimized + youtube fix + cookie fix + cors sleep mode fix applied",
    security_level: "HIGH",
    limits: {
      duration: "2 horas m√°ximo (MP3/MP4, qualquer qualidade)",
      file_size: "1GB m√°ximo",
      rate_limit: "20 downloads a cada 10 minutos",
      concurrent: "8 downloads simult√¢neos",
    },
    quality_support: {
      mp3: "64kbps - 320kbps",
      mp4: "144p, 360p, 480p, 720p, 1080p",
    },
    memory_features: [
      "üß† Railway-compatible garbage collection",
      "üß† Multiple cleanup methods (native + manual)",
      "üß† Memory usage monitoring",
      "üß† Automatic cleanup every 3 minutes",
      "üß† Sleep mode after 20min inactive (mais tolerante)",
      "üß† Memory limit enforcement (256MB)",
      "üß† Real-time memory alerts",
      "üß† Aggressive manual cleanup when GC unavailable",
    ],
    cors_features: [
      "üö® Robust CORS configuration",
      "üö® Explicit preflight handler",
      "üö® Sleep mode compatibility",
      "üö® Multiple origin support",
      "üö® Credential support enabled",
      "üö® Comprehensive headers support",
    ],
    youtube_features: [
      "üéØ Multiple bypass strategies",
      "üéØ Auto yt-dlp updates",
      "üéØ Advanced cookie rotation",
      "üéØ Fallback methods",
      "üéØ Rate limit handling",
      "üéØ Bot detection bypass",
    ],
    twitter_features: [
      "üê¶ Dedicated Twitter cookie pool",
      "üîû NSFW content support",
      "üîç Twitter-specific cookie validation",
      "‚ö° Optimized for Twitter rate limits",
      "üõ°Ô∏è Secure Twitter authentication",
    ],
    debug_features: [
      "üîç Cookie format validation",
      "üîç Environment variable checking",
      "üîç Cookie pool debugging",
      "üîç Platform-specific cookie selection",
      "üîç Real-time cookie usage logging",
      "üê¶ Twitter NSFW readiness check",
      "üéØ YouTube strategy testing",
      "üß† Railway memory usage monitoring",
      "üö® CORS troubleshooting",
    ],
    fixes_applied: [
      "‚úÖ Counter never goes negative",
      "‚úÖ 144p quality support added",
      "‚úÖ Impersonation warnings eliminated",
      "‚úÖ Subtitle rate limit errors ignored",
      "‚úÖ Non-critical error handling",
      "‚úÖ Cookie debugging system",
      "‚úÖ Twitter NSFW support added",
      "‚úÖ Cookie validation fixed - removed incorrect '=' check",
      "‚úÖ Netscape format cookies now load properly",
      "üéØ YouTube bypass strategies implemented",
      "üéØ Multiple fallback methods for blocked content",
      "üéØ Auto yt-dlp update system",
      "üß† Railway memory optimization system implemented",
      "üß† Multiple GC methods for Railway compatibility",
      "üß† Sleep mode for cost reduction",
      "üö® CORS sleep mode issue fixed",
      "üö® Explicit preflight handler added",
      "üö® More tolerant sleep timing (20min)",
    ],
    features: [
      "‚úÖ Input validation & sanitization",
      "‚úÖ Command injection protection",
      "‚úÖ Rate limiting (20 downloads/10min)",
      "‚úÖ Duration limits (2h max for everything)",
      "‚úÖ Concurrent download limits",
      "‚úÖ Domain whitelist protection",
      "‚úÖ Secure file handling",
      "‚úÖ Resource usage limits",
      "‚úÖ Security headers (Helmet)",
      "‚úÖ Safe cookie management",
      "‚úÖ Fixed cookie validation for Netscape format",
      "üéØ Advanced YouTube bypass system",
      "üß† Railway-intelligent memory management",
      "üö® Robust CORS configuration",
    ],
    platform_support: {
      tiktok: "‚úÖ Working perfectly",
      twitter: `üê¶ Working with ${twitterCookiePool.length} dedicated cookies + ${googleCookiePool.length} fallback`,
      instagram: `‚úÖ Working with ${instagramCookiePool.length} cookies`,
      youtube: `üéØ FIXED - Working with advanced bypass strategies + ${googleCookiePool.length} cookies`,
    },
    debug_endpoints: [
      "GET /test-cookies - Diagn√≥stico completo de cookies (incluindo Twitter)",
      "GET /health - Status do sistema",
      "GET /memory - Status de mem√≥ria em tempo real (Railway compatible)",
    ],
    railway_optimizations: [
      "üöÄ NODE_OPTIONS compatibility check",
      "üöÄ Multiple GC fallback methods",
      "üöÄ Aggressive manual cleanup",
      "üöÄ Memory pressure detection",
      "üöÄ Container-optimized sleep mode",
      "üö® CORS sleep mode compatibility",
    ],
  })
})

app.use((error, req, res, next) => {
  console.error("‚ùå Erro n√£o tratado:", error.message)
  res.status(500).json({
    error: "Erro interno do servidor",
    timestamp: new Date().toISOString(),
  })
})

app.use("*", (req, res) => {
  res.status(404).json({
    error: "Rota n√£o encontrada",
    available_endpoints: ["/", "/health", "/download", "/test-cookies", "/memory"],
  })
})

// üß† LIMPEZA AUTOM√ÅTICA A CADA 3 MINUTOS (Railway otimizado)
setInterval(
  () => {
    console.log("üßπ Limpeza autom√°tica Railway iniciada...")
    cleanupOldFiles()
    aggressiveMemoryCleanup() // Usar limpeza agressiva
    logMemoryUsage()
  },
  3 * 60 * 1000,
) // 3 minutos para Railway

// üß† SLEEP MODE MAIS TOLERANTE - 20 MINUTOS para evitar CORS issues
setInterval(() => {
  const inactive = Date.now() - lastActivity
  if (inactive > 20 * 60 * 1000 && activeDownloads === 0) {
    console.log("üí§ 20min inativo + 0 downloads - entrando em sleep mode Railway...")
    console.log("üß† √öltima limpeza agressiva de mem√≥ria antes do sleep...")
    aggressiveMemoryCleanup()
    process.exit(0) // Railway restarta quando necess√°rio
  }
}, 60 * 1000) // Verificar a cada minuto

app.listen(PORT, async () => {
  console.log(
    "üõ°Ô∏è WaifuConvert Backend - RAILWAY MEMORY OPTIMIZED + YOUTUBE FIX + COOKIE VALIDATION FIXED + TWITTER NSFW SUPPORT + CORS SLEEP MODE FIX",
  )
  console.log(`üåê Porta: ${PORT}`)

  // üß† VERIFICAR VARI√ÅVEIS DE OTIMIZA√á√ÉO DE MEM√ìRIA NA INICIALIZA√á√ÉO - RAILWAY
  checkOptimizationVariables()

  console.log("üîí RECURSOS DE SEGURAN√áA ATIVADOS:")
  console.log("  ‚úÖ Valida√ß√£o rigorosa de entrada")
  console.log("  ‚úÖ Prote√ß√£o contra command injection")
  console.log("  ‚úÖ Rate limiting inteligente")
  console.log("  ‚úÖ Limite de dura√ß√£o: 2 horas para tudo")
  console.log("  ‚úÖ Contador de downloads corrigido")
  console.log("  ‚úÖ Suporte a 144p adicionado")
  console.log("  ‚úÖ Tratamento de erros n√£o cr√≠ticos")
  console.log("  ‚úÖ Sistema de debug de cookies")
  console.log("  üê¶ Suporte completo ao Twitter NSFW")
  console.log("  üîß CORRE√á√ÉO APLICADA: Valida√ß√£o de cookies Netscape")
  console.log("  üéØ YOUTUBE FIX: Estrat√©gias m√∫ltiplas de bypass")
  console.log("  üéØ Auto-atualiza√ß√£o do yt-dlp")
  console.log("  üß† RAILWAY MEMORY OPTIMIZATION: Sistema de limpeza agressiva")
  console.log("  üß† M√∫ltiplos m√©todos de GC (nativo + manual)")
  console.log("  üß† Limpeza autom√°tica a cada 3 minutos")
  console.log("  üß† Sleep mode ap√≥s 20min inativo (mais tolerante)")
  console.log("  üö® CORS SLEEP MODE FIX: Configura√ß√£o robusta")
  console.log("  üö® Explicit preflight handler")
  console.log("  ‚úÖ Whitelist de dom√≠nios")
  console.log("  ‚úÖ Limites de recursos")
  console.log("  ‚úÖ Headers de seguran√ßa")
  console.log("  ‚úÖ Execu√ß√£o segura de comandos")
  console.log("  ‚úÖ Gerenciamento seguro de arquivos")

  // Tentar atualizar yt-dlp na inicializa√ß√£o
  console.log("üîÑ Verificando yt-dlp na inicializa√ß√£o...")
  await ensureYtDlpUpdated()

  const cookiesCreated = createSecureCookieFiles()
  loadCookiePool()

  console.log("üç™ COOKIES SEGUROS:")
  console.log(`  üîµ Google: ${googleCookiePool.length}`)
  console.log(`  üì∏ Instagram: ${instagramCookiePool.length}`)
  console.log(`  üê¶ Twitter: ${twitterCookiePool.length}`)
  console.log(`  üìä Total: ${generalCookiePool.length}`)

  console.log("üïê LIMITES DE DURA√á√ÉO:")
  console.log(`  üìπ Qualquer formato: m√°ximo ${formatDuration(MAX_DURATION)}`)
  console.log(`  üìÅ Tamanho m√°ximo: 1GB`)

  console.log("üéØ QUALIDADES SUPORTADAS:")
  console.log("  üéµ MP3: 64kbps - 320kbps")
  console.log("  üìπ MP4: 144p, 360p, 480p, 720p, 1080p")

  console.log("üê¶ RECURSOS TWITTER:")
  console.log("  üîû Suporte a conte√∫do NSFW")
  console.log("  üç™ Pool dedicado de cookies")
  console.log("  üîç Valida√ß√£o espec√≠fica de cookies")
  console.log("  ‚ö° Otimizado para rate limits")

  console.log("üéØ RECURSOS YOUTUBE:")
  console.log("  üéØ Estrat√©gias m√∫ltiplas de bypass")
  console.log("  üéØ Auto-atualiza√ß√£o do yt-dlp")
  console.log("  üéØ Rota√ß√£o inteligente de cookies")
  console.log("  üéØ Fallback para conte√∫do bloqueado")
  console.log("  üéØ Detec√ß√£o e bypass de bot")

  console.log("üß† RECURSOS DE MEM√ìRIA RAILWAY:")
  console.log("  üß† Limpeza autom√°tica a cada 3 minutos")
  console.log("  üß† M√∫ltiplos m√©todos de GC (nativo + manual)")
  console.log("  üß† Limpeza agressiva quando GC indispon√≠vel")
  console.log("  üß† Monitoramento de uso de RAM")
  console.log("  üß† Sleep mode ap√≥s 20min inativo (mais tolerante)")
  console.log("  üß† Limite de mem√≥ria: 256MB")
  console.log("  üß† Alertas de alto uso de mem√≥ria")
  console.log("  üß† Cache cleanup autom√°tico")

  console.log("üö® RECURSOS DE CORS:")
  console.log("  üö® Configura√ß√£o robusta para evitar sleep mode issues")
  console.log("  üö® Explicit preflight OPTIONS handler")
  console.log("  üö® Multiple origin support")
  console.log("  üö® Credential support habilitado")
  console.log("  üö® Comprehensive headers support")
  console.log("  üö® Sleep mode timing mais tolerante (20min)")

  console.log("üîß CORRE√á√ïES CR√çTICAS APLICADAS:")
  console.log("  ‚úÖ Removida verifica√ß√£o incorreta de '=' nos cookies")
  console.log("  ‚úÖ Cookies Netscape agora carregam corretamente")
  console.log("  üéØ YouTube bypass strategies implementadas")
  console.log("  üéØ Sistema de fallback para YouTube bloqueado")
  console.log("  üß† Sistema de otimiza√ß√£o de mem√≥ria Railway implementado")
  console.log("  üß† M√∫ltiplos m√©todos de GC para compatibilidade Railway")
  console.log("  üö® CORS sleep mode issue RESOLVIDO")
  console.log("  üö® Preflight handler expl√≠cito adicionado")
  console.log("  üö® Sleep timing mais tolerante para evitar CORS issues")

  console.log("üîç ENDPOINTS DE DEBUG:")
  console.log("  üß™ /test-cookies - Diagn√≥stico completo")
  console.log("  ‚ù§Ô∏è /health - Status do sistema")
  console.log("  üß† /memory - Status de mem√≥ria em tempo real (Railway compatible)")

  // üß† LOG INICIAL DE MEM√ìRIA E TESTE DE LIMPEZA
  console.log("üß† Status inicial de mem√≥ria:")
  logMemoryUsage()

  console.log("üß™ Testando limpeza agressiva na inicializa√ß√£o...")
  aggressiveMemoryCleanup()

  console.log("üö® CORS configurado para:")
  console.log("  üåê https://www.waifuconvert.com")
  console.log("  üåê https://waifuconvert.com")
  console.log("  üåê https://waifuconvert.vercel.app")
  console.log("  üõ°Ô∏è Explicit preflight handler ativo")
  console.log("  ‚è∞ Sleep mode mais tolerante (20min)")

  cleanupOldFiles()
})

process.on("uncaughtException", (error) => {
  console.error("‚ùå Erro n√£o capturado:", error.message)
  console.log("üß† Limpeza de emerg√™ncia antes de sair...")
  aggressiveMemoryCleanup()
  process.exit(1)
})

process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Promise rejeitada:", reason)
})

process.on("SIGTERM", () => {
  console.log("üõë Recebido SIGTERM, encerrando graciosamente...")
  console.log("üß† Limpeza final agressiva de mem√≥ria...")
  aggressiveMemoryCleanup()
  process.exit(0)
})

process.on("SIGINT", () => {
  console.log("üõë Recebido SIGINT, encerrando graciosamente...")
  console.log("üß† Limpeza final agressiva de mem√≥ria...")
  aggressiveMemoryCleanup()
  process.exit(0)
})
